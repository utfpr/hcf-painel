import L from 'leaflet';

(function () {
    L.Control.NavBar = L.Control.extend({
        options: {
            position: 'topleft',
            forwardTitle: 'Go forward in map view history',
            backTitle: 'Go back in map view history',
            homeTitle: 'Go to home map view'
        },

        onAdd(map) {
            this.setMap(map)

            if (!this.options.center) {
                this.options.center = this.getMap().getCenter()
            }
            if (!this.options.zoom) {
                this.options.zoom = this.getMap().getZoom()
            }
            const { options } = this

            const controlName = 'leaflet-control-navbar'
            const container = L.DomUtil.create('div', `${controlName} leaflet-bar`)

            this.homeButton = this.createButton(options.homeTitle, `${controlName}-home`, container, this.goHome)
            this.fwdButton = this.createButton(options.forwardTitle, `${controlName}-fwd`, container, this.goForward)
            this.backButton = this.createButton(options.backTitle, `${controlName}-back`, container, this.goBack)

            this.viewHistory = [{ center: this.options.center, zoom: this.options.zoom }]
            this.currentIndex = 0
            this.updateDisabled()
            this.getMap().once('moveend', () => {
                this.getMap().on('moveend', this.updateHistory, this)
            })
            this.getMap().setView(options.center, options.zoom)

            return container
        },

        onRemove(map) {
            this.getMap().off('moveend', this.updateHistory, this)
        },

        goHome() {
            if (this.options.bbox) {
                try {
                    this.getMap().fitBounds(this.options.bbox)
                } catch (err) {
                    this.getMap().setView(this.options.center, this.options.zoom)
                }
            } else {
                this.getMap().setView(this.options.center, this.options.zoom)
            }
        },

        goBack() {
            if (this.currentIndex !== 0) {
                this.getMap().off('moveend', this.updateHistory, this)
                this.getMap().once('moveend', () => {
                    this.getMap().on('moveend', this.updateHistory, this)
                })
                this.currentIndex--
                this.updateDisabled()
                const view = this.viewHistory[this.currentIndex]
                this.getMap().setView(view.center, view.zoom)
            }
        },

        goForward() {
            if (this.currentIndex != this.viewHistory.length - 1) {
                this.getMap().off('moveend', this.updateHistory, this)
                this.getMap().once('moveend', () => {
                    this.getMap().on('moveend', this.updateHistory, this)
                })
                this.currentIndex++
                this.updateDisabled()
                const view = this.viewHistory[this.currentIndex]
                this.getMap().setView(view.center, view.zoom)
            }
        },

        createButton(title, className, container, fn) {
            const link = L.DomUtil.create('a', className, container)
            link.href = '#'
            link.title = title
            link.style.width = '32px'
            link.style.height = '32px'
            link.style.display = 'flex'
            link.style.justifyContent = 'center'
            link.style.alignItems = 'center'

            L.DomEvent.on(link, 'mousedown dblclick', L.DomEvent.stopPropagation).on(link, 'click', L.DomEvent.stop)
                .on(link, 'click', fn, this)
                .on(link, 'click', this.refocusOnMap, this)

            return link
        },

        updateHistory() {
            const newView = { center: this.getMap().getCenter(), zoom: this.getMap().getZoom() }
            const insertIndex = this.currentIndex + 1
            this.viewHistory.splice(insertIndex, this.viewHistory.length - insertIndex, newView)
            this.currentIndex++
            this.updateDisabled()
        },

        updateDisabled() {
            this.setButtonEnabled('forward', this.currentIndex < this.viewHistory.length - 1)
            this.setButtonEnabled('back', this.currentIndex > 0)
        },

        setButtonEnabled(direction, enabled) {
            const button = direction === 'forward' ? this.fwdButton : this.backButton
            const disabledClass = direction === 'forward' ? 'leaflet-control-navbar-fwd-disabled' : 'leaflet-control-navbar-back-disabled'
            const leafletDisabled = 'leaflet-disabled'
            if (enabled) {
                L.DomUtil.removeClass(button, disabledClass)
                L.DomUtil.removeClass(button, leafletDisabled)
            } else {
                L.DomUtil.addClass(button, disabledClass)
                L.DomUtil.addClass(button, leafletDisabled)
            }
        },

        refocusOnMap() {
            this.getMap().getContainer()
                .focus()
        },

        getMap() {
            return this.internalMap
        },

        setMap(map) {
            this.internalMap = map
        }
    })

    L.control.navbar = function (options) {
        return new L.Control.NavBar(options)
    }
}())
